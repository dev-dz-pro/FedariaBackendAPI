stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  DOCKER_REGISTRY: 854130342536.dkr.ecr.eu-west-3.amazonaws.com
  IMAGE_TAG_LATEST: $DOCKER_REGISTRY/vifbox:latest
  AWS_DEFAULT_REGION: eu-west-3

sonarqube-check:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  # stage: test
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - staging # or the name of your main branch

# pylint:
#   stage: test
#   image: 
#     name: pooriaghaedi/aws:latest
#     entrypoint: [""]
#   script:
#   - pip3 install pylint 
#   - pylint -d C0301 vifApp/*.py
#   only: 
#     - staging

pylint:
  stage: test
  # image: 
  #   name: pooriaghaedi/aws:latest
  #   entrypoint: [""]
  allow_failure: false
  before_script:
    - pip install pylint pylint-exit anybadge
  script:
    - mkdir ./pylint
    - pylint --output-format=text . | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/

build-job:       # This job runs in the build stage, which runs first.
  image: 
    # name: amazon/aws-cli
    name: pooriaghaedi/awscli-docker:latest
    entrypoint: [""]
  # services:
  #   - docker:dind
  stage: build
  script:
    - docker build -t $IMAGE_TAG_LATEST -f Dockerfile .
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker push $IMAGE_TAG_LATEST
  only:
    - staging
deploy:
  image: 
    name: pooriaghaedi/aws:latest
    entrypoint: [""]
  stage: deploy
  script:
    - aws eks --region eu-west-3 update-kubeconfig --name Vifbox-EKS
    - kubectl rollout  restart deployment/python-web -n python-web
  only:
    - staging

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
